import React, { useState } from "react";
import * as XLSX from "xlsx";
import Button from '@material-ui/core/Button';
import BarChart from './BarChart'
import './server_vulnerability.css'
import { fireDB } from "../firebase_config";


const Server_vulnerability = ({user}) => {
  
  const [Items, SetItems] = useState([]); // Server_vulnerability.js Table 결과값
  const [InputFile, SetinputFile] = useState(false); // 파일 입력 유무
  const [Jsondata, SetJsondata] = useState([]); // UserInfo 통계값 
  const [Confirm, SetConfirm] = useState(false) //취약점결과 엑셀파일 유무
  const [Space,SetSpace] = useState({Management : ''});
  let today = new Date(); 
  // 년도 월 일 시간 분 을 day에 넣음
  const day = String(today.getFullYear()) + "/" + String((today.getMonth() + 1)) + "/" + String(today.getDate()) + "  " + String(today.getHours()) + ":" +  String(today.getMinutes());
  

  const readExcel = (file) => {
    const promise = new Promise((resolve, reject) => {
      const fileReader = new FileReader();
      fileReader.readAsArrayBuffer(file);

      fileReader.onload = (e) => {
        const bufferArray = e.target.result;

        const wb = XLSX.read(bufferArray, { type: "buffer" });
        const wsname3 = wb.SheetNames[4];

        if (wb.SheetNames[0] === "표지" && wb.SheetNames[1] === "대상" && wb.SheetNames[2] === "통계" && wb.SheetNames[3] === "요약"){
          SetConfirm(true);
        } else {
          alert("취약점 결과 csv,xlsx 파일이 아닙니다.")
        }

        const ws3 = wb.Sheets[wsname3];

        const data = XLSX.utils.sheet_to_json(ws3);

        // 점검항목, 결과 유무를 result 에 저장하였다.
        let result = new Array();
        
         // number = W-01  ,  category = Administrator 계정 이름 바꾸기  , result = Y     inspection = 현황  , result2 = 결과
         data.map((sample,index) => {
           if(index > 16 && index < 99){
             let temp = new Object();
             temp.number = sample.__EMPTY_1;
             temp.category = sample.__EMPTY_2;
             temp.result = sample.__EMPTY_9;
             let datatemp = sample.__EMPTY_10.split('※'); // Array 3개 전부 첫번째 빈칸
             datatemp.shift(); // 첫번째 Array삭제
            //  console.log(datatemp)
             temp.current  = datatemp[0]; // 현황
             temp.result2 = datatemp[1] // 결과
             temp.key = sample.__rowNum__;
             result.push(temp);
           }
         })
 
      
         // const jsonResult = JSON.stringify(result);
 
         
         resolve(result);
 
       };
 

      fileReader.onerror = (error) => {
        reject(error);
      };
    });
      
    promise.then((d) => {
      // console.log(d)
      SetItems(d);
      
      // const result = []
      // d.map((data,index) => {
      //   result.push(data.__EMPTY_2)
      //   result.push(data.__EMPTY_7)
      // })

      // console.log(result)
    })   

    const promise2 = new Promise((resolve, reject) => {
      const fileReader2 = new FileReader();
      fileReader2.readAsArrayBuffer(file);

      fileReader2.onload = (e) => {
      const bufferArray = e.target.result;

      const wb = XLSX.read(bufferArray, { type: "buffer" });
        
      // 5번째 시트 얻어오기
      const wsname4 = wb.SheetNames[4];
      const ws4 = wb.Sheets[wsname4];
      const data2 = XLSX.utils.sheet_to_json(ws4);
        
      // 진단 요약한 결과를 Object를 생성하여 저장한 후 Array(result2 에 push 하여 취약점 통계 Array(result2)를 생성 하였다.
      
      //hostname parsing
      
      let result2 = new Array();
      
       // EMPTY_3 : 총 검사 개수  , EMPTY_4 : 양호  ,  EMPTY_5 : 취약   , EMPTY_6 : 수동,알수없음   ,  EMPTY_7 : 보안수준(통계)
      data2.map((temp3,index) => {
         if (index > 7 && index < 15){
           let temp2 = new Array();
           temp2.total = temp3.__EMPTY_3;
           temp2.Good = temp3.__EMPTY_4;
           temp2.Vulnerable = temp3.__EMPTY_5;
           temp2.NA = temp3.__EMPTY_6;
           temp2.Probability = temp3.__EMPTY_7 * 100;
           temp2.key = temp3.__rowNum__
           result2.push(temp2);
        }
      })
      result2.push(wsname4)

      
       // const jsonResult = JSON.stringify(result);

       
       resolve(result2);

     };

      fileReader2.onerror = (error) => {
        reject(error);
      };
    });
      
    promise2.then((d) => {
      //console.log(d);
      SetSpace({ Management : [ // BarChart를 같이 쓰기위해
        d[0].Probability,
        d[1].Probability,
        d[2].Probability,
        d[3].Probability,
        d[4].Probability,
        d[5].Probability,
      ]});
      SetJsondata(d);
   
      // const result = []
      // d.map((data,index) => {
      //   result.push(data.__EMPTY_2)
      //   result.push(data.__EMPTY_7)
      // })

      // console.log(result)
    })     
  };

  //Jsondata[6].Probability.toFixed(2)

  return (
    <div className="server_vulnerability">
       <div>
      { InputFile && Confirm ? (
         
        <div>
        <Button
        style={{float : "right", width: "100px"}}
        variant="outlined"
        color="secondary"
        onClick = {() => {

        
          if (typeof(Jsondata[7]) === "string" && 
              typeof(Jsondata[6].Good) === "number" && 
              typeof(Jsondata[6].NA) === "number" && 
              typeof(Jsondata[6].Probability) === "number" && 
              typeof(Jsondata[6].Vulnerable) === "number" &&
              typeof(Jsondata[6].total) === "number"){
      //Date.now() 현재시간 나타내준다.
          fireDB
            .collection("Vulnerability_Json")
            .doc(Date.now() + Jsondata[7])
            .set({
              hostname: Jsondata[7],
              total: Jsondata[6].total,
              Good : Jsondata[6].Good,
              NA : Jsondata[6].NA,
              Probability : Jsondata[6].Probability,
              Vulnerable : Jsondata[6].Vulnerable,
              key : Jsondata[6].key,
              date: day,
              creatorId : user.uid,
              Management: [ // 통계 
                Jsondata[0].Probability,
                Jsondata[1].Probability,
                Jsondata[2].Probability,
                Jsondata[3].Probability,
                Jsondata[4].Probability,
                Jsondata[5].Probability,
              ]
            })
            .then(alert("저장되었습니다."))
            .catch(error=> console.log(error))


            
          } 
        }}
        >
          저장
        </Button>
        <br/><br/><br/>
        <h1> 취약점 결과 </h1>
        </div>
      ) : (
      <input
        type="file"
        onChange={(e) => {
          const file = e.target.files[0];
          readExcel(file);
          SetinputFile(true)
        } 
      }
      />
      )}
      </div>
      {InputFile&&Confirm ? (
      <div>
        
         <BarChart result={Space}/>
         <br/><br/><br/><br/>
         <h4>Y : 양호 , N : 취약 , N/A : 해당사항 없음</h4>
         <table class="type09">
          <thead>
            <tr>
              <th scope="cols">구분</th>
              <th scope="cols">점검항목</th>
              <th scope="cols">결과 유무</th>
              <th scope="cols">점검 내용</th>
            </tr>
          </thead>
          <tbody>
            {Items.map((d) => (
              <tr key={ d.key } align="center">
                <th scope='row'>{d.number}</th>
                <td>{d.category}</td>
                <td>{d.result}</td>
                <th>{d.current}<br/>{d.result2}</th>
              </tr>
            ))}
            
          </tbody>
        </table>
              
       
        
      </div>
      ) : (
      <h1> 파일 없음 </h1>
      )}
  
      
      
    </div>
  )
}

export default Server_vulnerability;
