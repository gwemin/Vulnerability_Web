import React, { useState } from 'react';
import {NavLink, useHistory} from 'react-router-dom'
import { makeStyles } from '@material-ui/core/styles';
import Drawer from '@material-ui/core/Drawer';
import CssBaseline from '@material-ui/core/CssBaseline';
import AppBar from '@material-ui/core/AppBar';
import Toolbar from '@material-ui/core/Toolbar';
import List from '@material-ui/core/List';
import Typography from '@material-ui/core/Typography';
import Divider from '@material-ui/core/Divider';
import ListItem from '@material-ui/core/ListItem';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemText from '@material-ui/core/ListItemText';
import AirplayIcon from '@material-ui/icons/Airplay';
import SecurityIcon from '@material-ui/icons/Security';
import VpnKeyIcon from '@material-ui/icons/VpnKey';
import MenuIcon from '@material-ui/icons/Menu';
import ChevronLeftIcon from '@material-ui/icons/ChevronLeft';
import ChevronRightIcon from '@material-ui/icons/ChevronRight';
import { Button, IconButton, useTheme } from '@material-ui/core';
import MeetingRoomIcon from '@material-ui/icons/MeetingRoom';
import {authService} from 'firebase_config'
import PropTypes from 'prop-types';
import useScrollTrigger from '@material-ui/core/useScrollTrigger';
import clsx from 'clsx';
import Slide from '@material-ui/core/Slide';

// import NetworkCheckIcon from '@material-ui/icons/NetworkCheck';
// import StorageIcon from '@material-ui/icons/Storage';


const drawerWidth = 240;

const useStyles = makeStyles((theme) => ({
  root: {
    display: 'flex',
    
  },
  appBar: {
    zIndex: theme.zIndex.drawer + 1,
    transition: theme.transitions.create(['width', 'margin'], {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.leavingScreen,
    }),
  },
  appBarShift: {
    marginLeft: drawerWidth,
    width: `calc(100% - ${drawerWidth}px)`,
    transition: theme.transitions.create(['width', 'margin'], {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.enteringScreen,
    }),
  },
  menuButton: {
    marginRight: 36,
  },
  hide: {
    display: 'none',
  },
  drawer: {
    width: drawerWidth,
    flexShrink: 0,
    whiteSpace: 'nowrap',
  },
  drawerOpen: {
    width: drawerWidth,
    transition: theme.transitions.create('width', {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.enteringScreen,
    }),
  },
  drawerClose: {
    transition: theme.transitions.create('width', {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.leavingScreen,
    }),
    overflowX: 'hidden',
    width: theme.spacing(7) + 1,
    [theme.breakpoints.up('sm')]: {
      width: theme.spacing(9) + 1,
    },
  },
  toolbar: {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'flex-end',
    padding: theme.spacing(0, 1),
    // necessary for content to be below app bar
    ...theme.mixins.toolbar,
  },
  content: {
    flexGrow: 1,
    padding: theme.spacing(3),
  },
}));

function HideOnScroll(props) {
  const { children, window } = props;
  // Note that you normally won't need to set the window ref as useScrollTrigger
  // will default to window.
  // This is only being set here because the demo is in an iframe.
  const trigger = useScrollTrigger({ target: window ? window() : undefined });

  return (
    <Slide appear={false} direction="down" in={!trigger}>
      {children}
    </Slide>
  );
}

HideOnScroll.propTypes = {
  children: PropTypes.element.isRequired,
  /**
   * Injected by the documentation to work in an iframe.
   * You won't need it on your project.
   */
  window: PropTypes.func,
};



export default function Sidebar( {isLoggedIn, children} ) {
  const history = useHistory()
  const classes = useStyles();
  const theme = useTheme();
  const [open, setOpen] = useState(false);

  const handleDrawerOpen = () => {
    setOpen(true);
  };

  const handleDrawerClose = () => {
    setOpen(false);
  };
  
  return (
    <div className={classes.root}>
    <CssBaseline />
    <HideOnScroll {...children}>
    <AppBar
        position="fixed"
        className={clsx(classes.appBar, {
          [classes.appBarShift]: open,
        })}
      >
      <Toolbar>
        <IconButton
          color="inherit"
          aria-label="open drawer"
          onClick={handleDrawerOpen}
          edge="start"
          className={clsx(classes.menuButton, {
            [classes.hide]: open,
          })}
          >
          <MenuIcon />
        </IconButton>
        <Typography variant="h6" noWrap>
          취약점 통합관리 웹 시스템
        </Typography>
        {isLoggedIn ? (
        <Button
        variant="contained"
        color="secondary"
        className={classes.logout}
        endIcon={<MeetingRoomIcon />}
        onClick={() => {
          authService.signOut();
          history.push("/");
        }}>
        로그아웃
      </Button>
      ) : (
        <Button
        variant="contained"
        color="secondary"
        className={classes.logout}
        endIcon={<VpnKeyIcon />}
        onClick={() => {
          history.push("/");
        }}>
        로그인
      </Button>
      )}
      </Toolbar>
    </AppBar>
    </HideOnScroll>
    <Drawer
      variant="permanent"
      className={clsx(classes.drawer, {
        [classes.drawerOpen]: open,
        [classes.drawerClose]: !open,
      })}
      classes={{
        paper: clsx({
          [classes.drawerOpen]: open,
          [classes.drawerClose]: !open,
        }),
      }}
    >
      <div className={classes.toolbar}>
        <IconButton onClick={handleDrawerClose}>
          {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}
        </IconButton>
      </div>
      <Divider />
       
      {isLoggedIn ? (
        <>
        <List>     {/*  navigation bar */}
       
          <NavLink  to="/ServerVulnerability" style={{ textDecoration: 'none' }}>
            <ListItem button title="서버 취약점">
              <ListItemIcon><SecurityIcon color="primary" fontSize="large"/></ListItemIcon>
              <ListItemText primary={'서버 취약점'} />
            </ListItem>
            </NavLink >
        </List>

        
      
      <Divider />
      <List>
            <NavLink  to="/UserInfo" style={{ textDecoration: 'none' }}>
            <ListItem button title="사용자정보">
              <ListItemIcon><VpnKeyIcon color="primary" fontSize="large"/></ListItemIcon>
              <ListItemText primary={'사용자정보'} />
            </ListItem>
            </NavLink >
      </List>
      
      <Divider />

      <List>    {/* navigation bar */}          
            <NavLink  to="/summary" style={{ textDecoration: 'none' }}>
                <ListItem button title="개요" >
                  <ListItemIcon><AirplayIcon color="primary" fontSize="large"/></ListItemIcon>
                  <ListItemText primary={'개요'} />
                  
                </ListItem>
            </NavLink >
            </List>
          <Divider />
            
      </>
      ) : (
        <>

          <List>    {/* navigation bar */}          
            <NavLink  to="/summary" style={{ textDecoration: 'none' }}>
                <ListItem button title="개요" >
                  <ListItemIcon><AirplayIcon color="primary" fontSize="large"/></ListItemIcon>
                  <ListItemText primary={'개요'} />
                  
                </ListItem>
            </NavLink >
            </List>

            <Divider />
        </>
        )}
      </Drawer>
      {/* main 시작부분 */}
      <main className={classes.content}>
        <div className={classes.toolbar} />
        { children }  
      </main>
    </div>
  );
}